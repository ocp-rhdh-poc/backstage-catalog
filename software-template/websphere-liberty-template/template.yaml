apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: WebSphere-WAS-template
  title: WebSphere Liberty with ArgoCD and Tekton Pipeline
  description: Create a simple WebSphere Liberty app with ArgoCD and Tekton Pipeline
  tags:
    - recommended
    - java
    - websphere
    - maven
    - CICD
    - tekton
spec:
  owner: rhdh
  type: service
  parameters:
    - title: Provide Information for Application
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Repo name
          default: my-liberty-app
          ui:field: EntityNamePicker
          maxLength: 23
        image_name:
          title: Image name
          type: string
          default: mylibertyapp
          description: Image Name
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
          default: A cool websphere liberty app
    - title: Provide Image Registry Information
      required:
        - image_registry
      properties:
        image_registry:
          title: Image Registry
          type: string
          enum:
            - Tekton Pipeline
            - OpenShift Build Config
            - Github Action
    - title: Application repository Information
      required:
        - repo
      properties:
        namespace:
          title: Namespace of Project
          type: string
          description: Namespace of Project
          default: "demo"
        repo:
          title: Repository Location
          type: object
          properties:
            host:
              title: Repo Host
              type: string
              description: Your SCM host
              default: github.com
            owner:
              title: Repo Owner
              type: string
              description: Your SCM host organization/group
              default: ocp-rhdh-poc

  steps:
    - id: create-instana-monitoring
      name: Create Instana Monitoring
      action: http:backstage:request
      input:
        method: POST
        path: /proxy/instana/api/application-monitoring/settings/application  
        headers:
          content-type: 'application/json'
        body:
          label: "ATT-RHDH-${{ parameters.name }}"
          scope: INCLUDE_ALL_DOWNSTREAM
          boundaryScope: ALL
          builtInAlertIds: []
          tagFilterExpression:
            type: EXPRESSION
            logicalOperator: AND
            elements:
              - type: TAG_FILTER
                name: kubernetes.namespace.name
                operator: EQUALS
                entity: DESTINATION
                value: ${{ parameters.namespace }}
              - type: TAG_FILTER
                name: kubernetes.label
                operator: EQUALS
                entity: DESTINATION
                key: rhdh.app
                value: ${{ parameters.name }} 
                
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: "https://github.com/mattbman23/wasAppMod"
        targetPath: ./workspace
        values:
          name: ${{ parameters.name }}
          namespace: ${{ parameters.namespace }}
          instanalink: ${{ steps['create-instana-monitoring'].output.body.id }}

    - id: publish
      name: Publish
      action: publish:github
      input:
        repoUrl: "${{ parameters.repo.host }}?owner=${{ parameters.repo.owner }}&repo=${{parameters.name}}"
        repoVisibility: public
        sourcePath: ./workspace

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

    - id: generate-uid
      name: Generate Unique Identifier
      action: roadiehq:utils:uuid

    - id: template-gitops-deployment
      name: Generating Deployment Resources
      action: fetch:template
      input:
        url: "https://github.com/ocp-rhdh-poc/deployment_templates.git"
        values:
          name: ${{ parameters.name }}
          memorylimit: ${{ parameters.memorylimit }}
          source_repository: https://${{ parameters.repo.host }}/${{ parameters.repo.owner }}/${{ parameters.name }}.git
          gitops_repository: https://${{ parameters.repo.host }}/${{ parameters.repo.owner }}/${{ parameters.name }}-gitops.git
          namespace: ${{ parameters.namespace }}
          uid: ${{ steps.generate-uid.output.uuid }}
        targetPath: ./tenant-gitops

    - id: publish-gitops
      name: Publishing to Resource Repository
      action: publish:github
      input:
        repoUrl: "${{ parameters.repo.host }}?owner=${{ parameters.repo.owner }}&repo=${{parameters.name}}-gitops"
        title: gitops resources for ${{ parameters.name }}
        description: gitops resources for ${{ parameters.name }}
        sourcePath: ./tenant-gitops
        repoVisibility: public

    - id: create-argocd-resources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        appName: ${{ parameters.name }}-bootstrap
        argoInstance: main
        namespace: openshift-gitops
        repoUrl: https://${{ parameters.repo.host }}/${{ parameters.repo.owner }}/${{ parameters.name }}-gitops.git
        path: "java-was-app/argocd/"
  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
